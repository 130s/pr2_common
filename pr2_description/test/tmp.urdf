<!--     This document was autogenerated by xacro from /wg/stor2/johnhsu/projects/pr2/pr2_common/pr2_description/robots/pr2_no_arms.urdf.xacro -->
<!--     EDITING THIS FILE BY HAND IS NOT RECOMMENDED                       -->
<?xml version="1.0" ?><robot name="pr2" xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller" xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface" xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor" xmlns:xacro="http://ros.org/wiki/xacro">
  
  <!-- The following included files set up definitions of parts of the robot body -->
  <!-- misc common stuff? -->
  
  <!-- PR2 head -->
  
  <!-- PR2 tilting laser mount -->
  
  <!-- PR2 torso -->
  
  <!-- PR2 base -->
  
  <!-- Head sensors -->
  
  <!-- Camera sensors -->
  
  <!-- generic simulator_gazebo plugins for starting mechanism control, ros time, ros battery -->
  <gazebo>
    <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>1000.0</updateRate>
      <interface:audio name="gazebo_ros_controller_manager_dummy_iface"/>
    </controller:gazebo_ros_controller_manager>

    <controller:gazebo_ros_ocean_battery name="gazebo_ros_ocean_battery_controller" plugin="libgazebo_ros_ocean_battery.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>1.0</updateRate>
      <timeout>5</timeout>
      <interface:audio name="ocean_battery_dummy_interface"/>
      <powerStateTopic>power_state</powerStateTopic>
      <powerStateRate>10.0</powerStateRate>
      <fullChargeCapacity>87.78</fullChargeCapacity>     
      <dischargeRate>-474</dischargeRate>
      <chargeRate>525</chargeRate>
      <dischargeVoltage>15.52</dischargeVoltage>
      <chargeVoltage>16.41</chargeVoltage>
    </controller:gazebo_ros_ocean_battery>
  </gazebo>
  <!-- materials for visualization -->
  <material name="Blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material><material name="Green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material><material name="Grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material><material name="Grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material><material name="Red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material><material name="White">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material><material name="Caster">
    <texture filename="package://pr2_ogre/Media/materials/textures/pr2_caster_texture.png"/>
  </material><material name="Wheel_l">
    <texture filename="package://pr2_ogre/Media/materials/textures/pr2_wheel_left.png"/>
  </material><material name="Wheel_r">
    <texture filename="package://pr2_ogre/Media/materials/textures/pr2_wheel_right.png"/>
  </material><material name="RollLinks">
    <texture filename="package://pr2_ogre/Media/materials/textures/pr2_wheel_left.png"/>
  </material>

  <!-- Now we can start using the macros included above to define the actual PR2 -->

  <!-- The first use of a macro.  This one was defined in base.urdf.xacro above.
       A macro like this will expand to a set of link and joint definitions, and to additional
       Gazebo-related extensions (sensor plugins, etc).  The macro takes an argument, name, 
       that equals "base", and uses it to generate names for its component links and joints 
       (e.g., base_link).  The included origin block is also an argument to the macro.  By convention, 
       the origin block defines where the component is w.r.t its parent (in this case the parent 
       is the world frame). For more, see http://www.ros.org/wiki/xacro -->
  <link name="base_link">

      <inertial>
        <mass value="116.0"/>
        <origin xyz="-0.061 0.0 0.293"/>
        <inertia ixx="5.652232699207" ixy="-0.009719934438" ixz="1.293988226423" iyy="5.669473158652" iyz="-0.007379583694" izz="3.683196351726"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/base.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <!-- represent base collision with a simple rectangular model, positioned by base_size_z s.t. top
             surface of the collision box matches the top surface of the PR2 base -->
        <origin rpy="0 0 0" xyz="0 0 0.21"/>
        <geometry>
          <box size="0.65 0.65 0.04"/>
        </geometry>
      </collision>
    </link><link name="base_footprint">
      <inertial>
        <mass value="1.0"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
        
        <material name="Green"/>
      </visual>
      <collision>
        <!-- represent base collision with a simple rectangular model, positioned by base_size_z s.t. top
             surface of the collision box matches the top surface of the PR2 base -->
        <origin rpy="0 0 0" xyz="0 0 0.071"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
      </collision>
    </link><joint name="base_footprint_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0.051"/>
      <child link="base_link"/>
      <parent link="base_footprint"/>
    </joint><joint name="base_laser_joint" type="fixed">
      <axis xyz="0 1 0"/>
      <origin rpy="0 0 0" xyz="0.275 0.0 0.252"/>
      <parent link="base_link"/>
      <child link="base_laser_link"/>
    </joint><link name="base_laser_link" type="laser">
      <inertial>
        <mass value="0.001"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        <material name="Red"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size=".001 .001 .001"/>
        </geometry>
      </collision>
    </link><gazebo reference="base_laser_link">
      <sensor:ray name="base_laser">
        <rayCount>640</rayCount>
        <rangeCount>640</rangeCount>
        <laserCount>1</laserCount>

        <origin>0.0 0.0 0.0</origin>
        <displayRays>false</displayRays>

        <minAngle>-129.998394137</minAngle>
        <maxAngle>129.998394137</maxAngle>

        <minRange>0.05</minRange>
        <maxRange>10.0</maxRange>
        <resRange>0.01</resRange>
        <updateRate>20</updateRate>
        <controller:gazebo_ros_laser name="gazebo_ros_base_laser_controller" plugin="libgazebo_ros_laser.so">
          <gaussianNoise>0.005</gaussianNoise>
          <alwaysOn>true</alwaysOn>
          <updateRate>20</updateRate>
          <topicName>base_scan</topicName>
          <frameName>base_laser_link</frameName>
          <interface:laser name="gazebo_ros_base_laser_iface"/>
        </controller:gazebo_ros_laser>
      </sensor:ray>
    </gazebo><joint name="fl_caster_rotation_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_velocity="10"/>
      <calibration reference_position="-0.785398163397" upper="-0.785398163397"/> <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0.2225 0.2225 0.0282"/>
      <parent link="base_link"/>
      <child link="fl_caster_rotation_link"/>
    </joint><link name="fl_caster_rotation_link">

      <inertial>
        <mass value="3.473082"/>
        <origin xyz="0 0 0.07"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/caster.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <origin rpy="0.0 0.0 0.0" xyz="0 0 0.07"/>
        <geometry>
          <box size="0.192 0.164 0.013"/>
        </geometry>
      </collision>
    </link><transmission name="fl_caster_rotation_trans" type="SimpleTransmission">
      <actuator name="fl_caster_rotation_motor"/>
      <joint name="fl_caster_rotation_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><joint name="fl_caster_l_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 0.049 0"/>
      <parent link="fl_caster_rotation_link"/>
      <child link="fl_caster_l_wheel_link"/>
    </joint><link name="fl_caster_l_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_l"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="fl_caster_l_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_l"/>
    </gazebo><transmission name="fl_caster_l_wheel_trans" type="SimpleTransmission">
      <actuator name="fl_caster_l_wheel_motor"/>
      <joint name="fl_caster_l_wheel_joint"/>
      <mechanicalReduction>79.2380952381</mechanicalReduction>
    </transmission><joint name="fl_caster_r_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 -0.049 0"/>
      <parent link="fl_caster_rotation_link"/>
      <child link="fl_caster_r_wheel_link"/>
    </joint><link name="fl_caster_r_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_r"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="fl_caster_r_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_r"/>
    </gazebo><transmission name="fl_caster_r_wheel_trans" type="SimpleTransmission">
      <actuator name="fl_caster_r_wheel_motor"/>
      <joint name="fl_caster_r_wheel_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><gazebo reference="fl_caster_rotation_link">
      <material value="PR2/caster_texture"/>
    </gazebo><joint name="fr_caster_rotation_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_velocity="10"/>
      <calibration reference_position="-0.785398163397" upper="-0.785398163397"/> <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0.2225 -0.2225 0.0282"/>
      <parent link="base_link"/>
      <child link="fr_caster_rotation_link"/>
    </joint><link name="fr_caster_rotation_link">

      <inertial>
        <mass value="3.473082"/>
        <origin xyz="0 0 0.07"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/caster.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <origin rpy="0.0 0.0 0.0" xyz="0 0 0.07"/>
        <geometry>
          <box size="0.192 0.164 0.013"/>
        </geometry>
      </collision>
    </link><transmission name="fr_caster_rotation_trans" type="SimpleTransmission">
      <actuator name="fr_caster_rotation_motor"/>
      <joint name="fr_caster_rotation_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><joint name="fr_caster_l_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 0.049 0"/>
      <parent link="fr_caster_rotation_link"/>
      <child link="fr_caster_l_wheel_link"/>
    </joint><link name="fr_caster_l_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_l"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="fr_caster_l_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_l"/>
    </gazebo><transmission name="fr_caster_l_wheel_trans" type="SimpleTransmission">
      <actuator name="fr_caster_l_wheel_motor"/>
      <joint name="fr_caster_l_wheel_joint"/>
      <mechanicalReduction>79.2380952381</mechanicalReduction>
    </transmission><joint name="fr_caster_r_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 -0.049 0"/>
      <parent link="fr_caster_rotation_link"/>
      <child link="fr_caster_r_wheel_link"/>
    </joint><link name="fr_caster_r_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_r"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="fr_caster_r_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_r"/>
    </gazebo><transmission name="fr_caster_r_wheel_trans" type="SimpleTransmission">
      <actuator name="fr_caster_r_wheel_motor"/>
      <joint name="fr_caster_r_wheel_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><gazebo reference="fr_caster_rotation_link">
      <material value="PR2/caster_texture"/>
    </gazebo><joint name="bl_caster_rotation_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_velocity="10"/>
      <calibration reference_position="2.35619449019" upper="2.35619449019"/> <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="-0.2225 0.2225 0.0282"/>
      <parent link="base_link"/>
      <child link="bl_caster_rotation_link"/>
    </joint><link name="bl_caster_rotation_link">

      <inertial>
        <mass value="3.473082"/>
        <origin xyz="0 0 0.07"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/caster.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <origin rpy="0.0 0.0 0.0" xyz="0 0 0.07"/>
        <geometry>
          <box size="0.192 0.164 0.013"/>
        </geometry>
      </collision>
    </link><transmission name="bl_caster_rotation_trans" type="SimpleTransmission">
      <actuator name="bl_caster_rotation_motor"/>
      <joint name="bl_caster_rotation_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><joint name="bl_caster_l_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 0.049 0"/>
      <parent link="bl_caster_rotation_link"/>
      <child link="bl_caster_l_wheel_link"/>
    </joint><link name="bl_caster_l_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_l"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="bl_caster_l_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_l"/>
    </gazebo><transmission name="bl_caster_l_wheel_trans" type="SimpleTransmission">
      <actuator name="bl_caster_l_wheel_motor"/>
      <joint name="bl_caster_l_wheel_joint"/>
      <mechanicalReduction>79.2380952381</mechanicalReduction>
    </transmission><joint name="bl_caster_r_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 -0.049 0"/>
      <parent link="bl_caster_rotation_link"/>
      <child link="bl_caster_r_wheel_link"/>
    </joint><link name="bl_caster_r_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_r"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="bl_caster_r_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_r"/>
    </gazebo><transmission name="bl_caster_r_wheel_trans" type="SimpleTransmission">
      <actuator name="bl_caster_r_wheel_motor"/>
      <joint name="bl_caster_r_wheel_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><gazebo reference="bl_caster_rotation_link">
      <material value="PR2/caster_texture"/>
    </gazebo><joint name="br_caster_rotation_joint" type="continuous">
      <axis xyz="0 0 1"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_velocity="10"/>
      <calibration reference_position="2.35619449019" upper="2.35619449019"/> <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="-0.2225 -0.2225 0.0282"/>
      <parent link="base_link"/>
      <child link="br_caster_rotation_link"/>
    </joint><link name="br_caster_rotation_link">

      <inertial>
        <mass value="3.473082"/>
        <origin xyz="0 0 0.07"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/caster.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <origin rpy="0.0 0.0 0.0" xyz="0 0 0.07"/>
        <geometry>
          <box size="0.192 0.164 0.013"/>
        </geometry>
      </collision>
    </link><transmission name="br_caster_rotation_trans" type="SimpleTransmission">
      <actuator name="br_caster_rotation_motor"/>
      <joint name="br_caster_rotation_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><joint name="br_caster_l_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 0.049 0"/>
      <parent link="br_caster_rotation_link"/>
      <child link="br_caster_l_wheel_link"/>
    </joint><link name="br_caster_l_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_l"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="br_caster_l_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_l"/>
    </gazebo><transmission name="br_caster_l_wheel_trans" type="SimpleTransmission">
      <actuator name="br_caster_l_wheel_motor"/>
      <joint name="br_caster_l_wheel_joint"/>
      <mechanicalReduction>79.2380952381</mechanicalReduction>
    </transmission><joint name="br_caster_r_wheel_joint" type="continuous">
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/> <!-- alpha tested effort and velocity limits -->
      <safety_controller k_velocity="10"/>
      <dynamics damping="0.0" friction="0.0"/>
      <origin rpy="0 0 0" xyz="0 -0.049 0"/>
      <parent link="br_caster_rotation_link"/>
      <child link="br_caster_r_wheel_link"/>
    </joint><link name="br_caster_r_wheel_link">
      <inertial>
        <mass value="0.44036"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.012411765597" ixy="-0.000711733678" ixz="0.00050272983" iyy="0.015218160428" iyz="-0.000004273467" izz="0.011763977943"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/base_v0/pr2_wheel.stl"/>
        </geometry>
        
        <material name="Wheel_r"/>
      </visual>
      <collision>
        <origin rpy="1.57079632679 0 0" xyz="0 0 0"/> <!-- rotation because cyl. geom primitive has symmetry axis in +x direction -->
        <geometry>
          <cylinder length="0.034" radius="0.074792"/>
        </geometry>
      </collision>
    </link><gazebo reference="br_caster_r_wheel_link">
      <mu1 value="100.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0"/>
      <kd value="1.0"/>
      <material value="PR2/wheel_r"/>
    </gazebo><transmission name="br_caster_r_wheel_trans" type="SimpleTransmission">
      <actuator name="br_caster_r_wheel_motor"/>
      <joint name="br_caster_r_wheel_joint"/>
      <mechanicalReduction>-79.2380952381</mechanicalReduction>
    </transmission><gazebo reference="br_caster_rotation_link">
      <material value="PR2/caster_texture"/>
    </gazebo><gazebo reference="base_link">
      <selfCollide>true</selfCollide>
      <sensor:contact name="base_contact_sensor">
        <geom>base_link_geom</geom>
        <updateRate>100.0</updateRate>
        <controller:gazebo_ros_bumper name="base_gazebo_ros_bumper_controller" plugin="libgazebo_ros_bumper.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>100.0</updateRate>
          <bumperTopicName>base_bumper</bumperTopicName>
          <interface:bumper name="base_bumper_iface"/>
        </controller:gazebo_ros_bumper>
      </sensor:contact>
      <material value="PR2/Green"/>
    </gazebo><gazebo>
      <controller:gazebo_ros_p3d name="p3d_base_controller" plugin="libgazebo_ros_p3d.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>100.0</updateRate>
        <bodyName>base_link</bodyName>
        <topicName>base_pose_ground_truth</topicName>
        <gaussianNoise>0.01</gaussianNoise>
        <frameName>map</frameName>
        <xyzOffsets>25.7 25.7 0</xyzOffsets> <!-- initialize odometry for fake localization-->
        <rpyOffsets>0 0 0</rpyOffsets>
        <interface:position name="p3d_base_position"/>
      </controller:gazebo_ros_p3d>
      <canonicalBody>base_footprint</canonicalBody>
    </gazebo>

  <joint name="torso_lift_joint" type="prismatic">
      <axis xyz="0 0 1"/>
      <limit effort="10000" lower="0.0" upper="0.31" velocity="0.013"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_position="100" k_velocity="2000000" soft_lower_limit="0.003" soft_upper_limit="0.305"/>
      <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <calibration falling="0.00536" reference_position="0.00536"/>
      <dynamics damping="20000.0"/> <!-- strictly tuned for sim only right now -->
      <origin rpy="0 0 0" xyz="-0.05 0 0.739675"/>
      <parent link="base_link"/>
      <child link="torso_lift_link"/>
    </joint><link name="torso_lift_link">

      <inertial>
        <mass value="36.248046"/>
        <origin xyz="-0.1 0 -0.0885"/>
        <inertia ixx="2.771653750257" ixy="0.004284522609" ixz="-0.160418504506" iyy="2.510019507959" iyz="0.029664468704" izz="0.526432355569"/>
      </inertial>

      <visual name="torso_lift_visual">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry name="torso_lift_visual_geom">
          <mesh filename="package://pr2_description/meshes/torso_v0/torso.stl"/>
        </geometry>
        
        <material name="Grey2"/>
      </visual>

      <collision name="torso_lift_collision">
        <origin rpy="0 0 0" xyz="0 0 0.16"/>
        <geometry name="torso_lift_collision_geom">
          <!-- arbitrarily chosen collision box by JH, torso collision is not important for now -->
          <box size="0.30 0.620 0.02"/>
        </geometry>
      </collision>
    </link><gazebo reference="torso_lift_link">
      <sensor:contact name="torso_lift_contact_sensor">
        <geom>torso_lift_link_geom</geom>
        <updateRate>100.0</updateRate>
        <controller:gazebo_ros_bumper name="torso_lift_gazebo_ros_bumper_controller" plugin="libgazebo_ros_bumper.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>100.0</updateRate>
          <bumperTopicName>torso_lift_bumper</bumperTopicName>
          <interface:bumper name="torso_lift_gazebo_ros_bumper_iface"/>
        </controller:gazebo_ros_bumper>
      </sensor:contact>
      <material value="PR2/Grey2"/>
    </gazebo><transmission name="torso_lift_trans" type="SimpleTransmission">
      <actuator name="torso_lift_motor"/>
      <joint name="torso_lift_joint"/>
      <mechanicalReduction>-52143.33</mechanicalReduction>
    </transmission><joint name="imu_joint" type="fixed">
      <axis xyz="0 1 0"/>
      <origin rpy="0 0 0" xyz="-0.02977 -0.1497 0.164"/>
      <parent link="torso_lift_link"/>
      <child link="imu_link"/>
    </joint><link name="imu_link">
      <inertial>
        <mass value="0.001"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        <material name="Red"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size=".001 .001 .001"/>
        </geometry>
      </collision>
    </link><gazebo>
      <controller:gazebo_ros_imu name="imu_controller" plugin="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>100.0</updateRate>
        <bodyName>imu_link</bodyName>
        <topicName>torso_lift_imu/data</topicName>
        <gaussianNoise>2.89e-08</gaussianNoise>
        <frameName>map</frameName>
        <xyzOffsets>0 0 0</xyzOffsets> 
        <rpyOffsets>0 0 0</rpyOffsets>
        <interface:position name="imu_position"/>
      </controller:gazebo_ros_imu>
    </gazebo>

  <!-- The xacro preprocesser will replace the parameters below, such as ${cal_head_x}, with
       numerical values that were specified in common.xacro which was included above -->
  <joint name="head_pan_joint" type="revolute">
      <axis xyz="0 0 1"/>
      <limit effort="2.645" lower="-3.007" upper="3.007" velocity="6"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_position="100" k_velocity="1.5" soft_lower_limit="-2.857" soft_upper_limit="2.857"/>
      <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <calibration reference_position="0.0" rising="0.0"/>
      <dynamics damping="1.0"/>
      <origin rpy="0.0 0.0 0.0" xyz="0.0    0.0     0.3915"/>
      <parent link="torso_lift_link"/>
      <child link="head_pan_link"/>
    </joint><link name="head_pan_link">
      <inertial>
        <mass value="1.611118"/>
        <origin rpy="0 0 0" xyz="-0.005717  0.010312 -0.029649"/>
        <inertia ixx="0.00482611007" ixy="-0.000144683999" ixz="0.000110076136" iyy="0.005218991412" iyz="-0.000314239509" izz="0.008618784925"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0 " xyz="0 0 0.0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/head_v0/head_pan.stl"/>
        </geometry>
        
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0.0 0.0 0.0 " xyz="-0.005717  0.010312 -0.029649"/>
        <geometry>
          <box size="0.188 0.219 0.137"/>
        </geometry>
      </collision>

    </link><gazebo reference="head_pan_link">
      <material value="PR2/Blue"/>
    </gazebo><transmission name="head_pan_trans" type="SimpleTransmission">
      <actuator name="head_pan_motor"/>
      <joint name="head_pan_joint"/>
      <mechanicalReduction>6.0</mechanicalReduction>
    </transmission><joint name="head_tilt_joint" type="revolute">
      <axis xyz="0 1 0"/>
      <limit effort="15" lower="-0.471238" upper="1.39626" velocity="5"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_position="100" k_velocity="1.5" soft_lower_limit="-0.3712" soft_upper_limit="1.29626"/>
      <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <calibration falling="0.0" reference_position="0.0"/>
      <dynamics damping="1.0"/>
      <origin rpy="0 0 0" xyz="0.068 0 0"/>
      <parent link="head_pan_link"/>
      <child link="head_tilt_link"/>
    </joint><link name="head_tilt_link">
      <inertial>
        <mass value="1.749727"/>
        <origin rpy="0 0 0" xyz="0.041935 0.003569 0.028143"/>
        <inertia ixx="0.010602303435" ixy="-0.000408814235" ixz="0.00198303894" iyy="0.011874383747" iyz="0.000197908779" izz="0.005516790626"/>
      </inertial>

      <visual>
        <origin rpy="0.0 0.0 0.0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://pr2_description/meshes/head_v0/head_tilt.stl"/>
        </geometry>
        
        <material name="Green"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0.041935 0.003569 0.028143"/>
        <geometry>
          <box size="0.064 0.253 0.181"/>
        </geometry>
      </collision>
    </link><gazebo reference="head_tilt_link">
      <material value="PR2/Green"/>
    </gazebo><transmission name="head_tilt_trans" type="SimpleTransmission">
      <actuator name="head_tilt_motor"/>
      <joint name="head_tilt_joint"/>
      <mechanicalReduction>6.0</mechanicalReduction>
    </transmission><joint name="head_plate_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0.0232 0 0.0645"/>     
      <parent link="head_tilt_link"/>
      <child link="head_plate_frame"/>
    </joint><link name="head_plate_frame">

      <inertial>
        <mass value="0.01"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
        
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><gazebo reference="head_plate_frame">
      <material value="PR2/Blue"/>
    </gazebo>

  <!-- Camera package: double stereo, prosilica -->
  <joint name="sensor_mount_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <parent link="head_plate_frame"/>
      <child link="sensor_mount_link"/>
    </joint><link name="sensor_mount_link">

      <inertial>
        <!-- Needs verification with CAD -->
        <mass value="0.05"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.01"/>
      </inertial>

      <!-- Should probably get real visuals here at some point -->
      <visual name="sensor_mount_sensor_visual">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry name="sensor_mount_sensor_visual_geom">
          <box size="0.01 0.01 0.01"/>
        </geometry>
        
        <material name="Blue"/>
      </visual>

      <collision name="sensor_mount_sensor_collision">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry name="sensor_mount_sensor_collision_geom">
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><joint name="high_def_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 -0.109 0.035"/>
      <parent link="sensor_mount_link"/>
      <child link="high_def_frame"/>
    </joint><link name="high_def_frame">

      <inertial>
        <mass value="0.01"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <!-- bogus values for visual aesthetics -->
        <origin rpy="0 0 0" xyz="-0.02 0 0"/>
        <geometry>
          <box size="0.04 0.04 0.04"/>
        </geometry>
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>


    </link><joint name="high_def_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0.0            0.0         0.0"/>
      <parent link="high_def_frame"/>
      <child link="high_def_optical_frame"/>
    </joint><link name="high_def_optical_frame">

      <inertial>
        <mass value="0.01"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <!-- bogus values for visual aesthetics -->
        <origin rpy="0 0 1.57079632679" xyz="0 0 0"/>
        <geometry>
          <cylinder length="0.05" radius="0.02"/>
        </geometry>
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><gazebo reference="high_def_frame">
    <sensor:camera name="high_def_sensor">
      <imageFormat>R8G8B8</imageFormat>
      <imageSize>2448 2050</imageSize>
      <hfov>45</hfov>
      <nearClip>0.1</nearClip>
      <farClip>100</farClip>
      <updateRate>20.0</updateRate>
      <controller:gazebo_ros_prosilica name="high_def_controller" plugin="libgazebo_ros_prosilica.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>20.0</updateRate>
        <imageTopicName>/prosilica/image_raw</imageTopicName>
        <cameraInfoTopicName>/prosilica/camera_info</cameraInfoTopicName>
        <pollServiceName>/prosilica/request_image</pollServiceName>
        <frameName>high_def_frame</frameName>
        <CxPrime>1224.5</CxPrime>
        <Cx>1224.5</Cx>
        <Cy>1025.5</Cy>
        <focal_length>2955</focal_length> <!-- image_width / (2*tan(hfov_radian /2)) -->
        <distortion_k1>0.00000001</distortion_k1>
        <distortion_k2>0.00000001</distortion_k2>
        <distortion_k3>0.00000001</distortion_k3>
        <distortion_t1>0.00000001</distortion_t1>
        <distortion_t2>0.00000001</distortion_t2>
        <interface:camera name="high_def_iface"/>
      </controller:gazebo_ros_prosilica>
    </sensor:camera>
    <material value="PR2/Blue"/>
  </gazebo><joint name="double_stereo_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0.0 0.0 0.003"/>
      <parent link="sensor_mount_link"/>
      <child link="double_stereo_link"/>
    </joint><link name="double_stereo_link">

      <inertial>
        <!-- Needs verification with CAD -->
        <mass value="0.1"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.01"/>
      </inertial>

      <!-- Should probably get real visuals here at some point -->
      <visual>
        <origin rpy="0 0 0" xyz="-0.01 0 0.025"/>
        <geometry>
          <box size="0.02 0.12 0.05"/>
        </geometry>
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="-0.01 0 0.025"/>
        <geometry>
          <box size="0.02 0.12 0.05"/>
        </geometry>
      </collision>
    </link><joint name="wide_stereo_frame_joint" type="fixed">
      <origin rpy="0.0   0.0   0.0" xyz="0.0 0.03 0.0305"/>
      <parent link="double_stereo_link"/>
      <child link="wide_stereo_link"/>
    </joint><link name="wide_stereo_link">
      
      <inertial>
        <mass value="0.1"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/> <!-- this inertia is made up for now. -->
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      
    </link><joint name="wide_stereo_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/> <!-- rotate frame from x-forward to z-forward camera coords -->
      <parent link="wide_stereo_link"/>
      <child link="wide_stereo_optical_frame"/>
    </joint><link name="wide_stereo_optical_frame" type="camera"/><joint name="wide_stereo_gazebo_l_stereo_camera_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <parent link="wide_stereo_link"/>
      <child link="wide_stereo_gazebo_l_stereo_camera_frame"/>
    </joint><link name="wide_stereo_gazebo_l_stereo_camera_frame">

      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><joint name="wide_stereo_gazebo_l_stereo_camera_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
      <parent link="wide_stereo_gazebo_l_stereo_camera_frame"/>
      <child link="wide_stereo_gazebo_l_stereo_camera_optical_frame"/>
    </joint><link name="wide_stereo_gazebo_l_stereo_camera_optical_frame"/><gazebo reference="wide_stereo_gazebo_l_stereo_camera_frame">
      <sensor:camera name="wide_stereo_gazebo_l_stereo_camera_sensor">
        <imageSize>640 480</imageSize>
        <imageFormat>BAYER_BGGR8</imageFormat>
        <hfov>90</hfov>
        <nearClip>0.1</nearClip>
        <farClip>100</farClip>
        <updateRate>25.0</updateRate>
        <controller:gazebo_ros_camera name="wide_stereo_gazebo_l_stereo_camera_controller" plugin="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>25.0</updateRate>
          <imageTopicName>wide_stereo/left/image_raw</imageTopicName>
          <cameraInfoTopicName>wide_stereo/left/camera_info</cameraInfoTopicName>
          <frameName>wide_stereo_optical_frame</frameName>
          <hackBaseline>0</hackBaseline>
          <CxPrime>320.5</CxPrime>
          <Cx>320.5</Cx>
          <Cy>240.5</Cy>
          <!-- image_width / (2*tan(hfov_radian /2)) -->
          <!-- 320 for wide and 772.55 for narrow stereo camera -->
          <focal_length>320</focal_length>
          <distortion_k1>0.00000001</distortion_k1>
          <distortion_k2>0.00000001</distortion_k2>
          <distortion_k3>0.00000001</distortion_k3>
          <distortion_t1>0.00000001</distortion_t1>
          <distortion_t2>0.00000001</distortion_t2>
          <interface:camera name="wide_stereo_gazebo_l_stereo_camera_iface"/>
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <turnGravityOff>true</turnGravityOff>
      <material>PR2/Blue</material>
    </gazebo><joint name="wide_stereo_gazebo_r_stereo_camera_frame_joint" type="fixed">
      <origin rpy="0.0 0.0 0.0" xyz="0.0 -0.09 0.0"/>
      <parent link="wide_stereo_gazebo_l_stereo_camera_frame"/>
      <child link="wide_stereo_gazebo_r_stereo_camera_frame"/>
    </joint><link name="wide_stereo_gazebo_r_stereo_camera_frame">

      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><joint name="wide_stereo_gazebo_r_stereo_camera_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
      <parent link="wide_stereo_gazebo_r_stereo_camera_frame"/>
      <child link="wide_stereo_gazebo_r_stereo_camera_optical_frame"/>
    </joint><link name="wide_stereo_gazebo_r_stereo_camera_optical_frame"/><gazebo reference="wide_stereo_gazebo_r_stereo_camera_frame">
      <sensor:camera name="wide_stereo_gazebo_r_stereo_camera_sensor">
        <imageSize>640 480</imageSize>
        <imageFormat>BAYER_BGGR8</imageFormat>
        <hfov>90</hfov>
        <nearClip>0.1</nearClip>
        <farClip>100</farClip>
        <updateRate>25.0</updateRate>
        <controller:gazebo_ros_camera name="wide_stereo_gazebo_r_stereo_camera_controller" plugin="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>25.0</updateRate>
          <imageTopicName>wide_stereo/right/image_raw</imageTopicName>
          <cameraInfoTopicName>wide_stereo/right/camera_info</cameraInfoTopicName>
          <frameName>wide_stereo_optical_frame</frameName>
          <hackBaseline>0.09</hackBaseline>
          <CxPrime>320.5</CxPrime>
          <Cx>320.5</Cx>
          <Cy>240.5</Cy>
          <!-- image_width / (2*tan(hfov_radian /2)) -->
          <!-- 320 for wide and 772.55 for narrow stereo camera -->
          <focal_length>320</focal_length>
          <distortion_k1>0.00000001</distortion_k1>
          <distortion_k2>0.00000001</distortion_k2>
          <distortion_k3>0.00000001</distortion_k3>
          <distortion_t1>0.00000001</distortion_t1>
          <distortion_t2>0.00000001</distortion_t2>
          <interface:camera name="wide_stereo_gazebo_r_stereo_camera_iface"/>
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <turnGravityOff>true</turnGravityOff>
      <material>PR2/Blue</material>
    </gazebo><gazebo reference="wide_stereo_link">
      <material value="PR2/Blue"/>
      <turnGravityOff value="true"/>
    </gazebo><gazebo reference="wide_stereo_optical_frame">
      <material value="PR2/Green"/>
      <turnGravityOff value="true"/>
    </gazebo><joint name="narrow_stereo_frame_joint" type="fixed">
      <origin rpy="0.0   0.0   0.0" xyz="0.0 0.06 0.0305"/>
      <parent link="double_stereo_link"/>
      <child link="narrow_stereo_link"/>
    </joint><link name="narrow_stereo_link">
      
      <inertial>
        <mass value="0.1"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/> <!-- this inertia is made up for now. -->
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        
        <material name="Blue"/>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      
    </link><joint name="narrow_stereo_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/> <!-- rotate frame from x-forward to z-forward camera coords -->
      <parent link="narrow_stereo_link"/>
      <child link="narrow_stereo_optical_frame"/>
    </joint><link name="narrow_stereo_optical_frame" type="camera"/><joint name="narrow_stereo_gazebo_l_stereo_camera_frame_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <parent link="narrow_stereo_link"/>
      <child link="narrow_stereo_gazebo_l_stereo_camera_frame"/>
    </joint><link name="narrow_stereo_gazebo_l_stereo_camera_frame">

      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><joint name="narrow_stereo_gazebo_l_stereo_camera_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
      <parent link="narrow_stereo_gazebo_l_stereo_camera_frame"/>
      <child link="narrow_stereo_gazebo_l_stereo_camera_optical_frame"/>
    </joint><link name="narrow_stereo_gazebo_l_stereo_camera_optical_frame"/><gazebo reference="narrow_stereo_gazebo_l_stereo_camera_frame">
      <sensor:camera name="narrow_stereo_gazebo_l_stereo_camera_sensor">
        <imageSize>640 480</imageSize>
        <imageFormat>L8</imageFormat>
        <hfov>45</hfov>
        <nearClip>0.1</nearClip>
        <farClip>100</farClip>
        <updateRate>25.0</updateRate>
        <controller:gazebo_ros_camera name="narrow_stereo_gazebo_l_stereo_camera_controller" plugin="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>25.0</updateRate>
          <imageTopicName>narrow_stereo/left/image_raw</imageTopicName>
          <cameraInfoTopicName>narrow_stereo/left/camera_info</cameraInfoTopicName>
          <frameName>narrow_stereo_optical_frame</frameName>
          <hackBaseline>0</hackBaseline>
          <CxPrime>320.5</CxPrime>
          <Cx>320.5</Cx>
          <Cy>240.5</Cy>
          <!-- image_width / (2*tan(hfov_radian /2)) -->
          <!-- 320 for wide and 772.55 for narrow stereo camera -->
          <focal_length>772.55</focal_length>
          <distortion_k1>0.00000001</distortion_k1>
          <distortion_k2>0.00000001</distortion_k2>
          <distortion_k3>0.00000001</distortion_k3>
          <distortion_t1>0.00000001</distortion_t1>
          <distortion_t2>0.00000001</distortion_t2>
          <interface:camera name="narrow_stereo_gazebo_l_stereo_camera_iface"/>
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <turnGravityOff>true</turnGravityOff>
      <material>PR2/Blue</material>
    </gazebo><joint name="narrow_stereo_gazebo_r_stereo_camera_frame_joint" type="fixed">
      <origin rpy="0.0 0.0 0.0" xyz="0.0 -0.09 0.0"/>
      <parent link="narrow_stereo_gazebo_l_stereo_camera_frame"/>
      <child link="narrow_stereo_gazebo_r_stereo_camera_frame"/>
    </joint><link name="narrow_stereo_gazebo_r_stereo_camera_frame">

      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>

      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </visual>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.01"/>
        </geometry>
      </collision>
    </link><joint name="narrow_stereo_gazebo_r_stereo_camera_optical_frame_joint" type="fixed">
      <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
      <parent link="narrow_stereo_gazebo_r_stereo_camera_frame"/>
      <child link="narrow_stereo_gazebo_r_stereo_camera_optical_frame"/>
    </joint><link name="narrow_stereo_gazebo_r_stereo_camera_optical_frame"/><gazebo reference="narrow_stereo_gazebo_r_stereo_camera_frame">
      <sensor:camera name="narrow_stereo_gazebo_r_stereo_camera_sensor">
        <imageSize>640 480</imageSize>
        <imageFormat>L8</imageFormat>
        <hfov>45</hfov>
        <nearClip>0.1</nearClip>
        <farClip>100</farClip>
        <updateRate>25.0</updateRate>
        <controller:gazebo_ros_camera name="narrow_stereo_gazebo_r_stereo_camera_controller" plugin="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>25.0</updateRate>
          <imageTopicName>narrow_stereo/right/image_raw</imageTopicName>
          <cameraInfoTopicName>narrow_stereo/right/camera_info</cameraInfoTopicName>
          <frameName>narrow_stereo_optical_frame</frameName>
          <hackBaseline>0.09</hackBaseline>
          <CxPrime>320.5</CxPrime>
          <Cx>320.5</Cx>
          <Cy>240.5</Cy>
          <!-- image_width / (2*tan(hfov_radian /2)) -->
          <!-- 320 for wide and 772.55 for narrow stereo camera -->
          <focal_length>772.55</focal_length>
          <distortion_k1>0.00000001</distortion_k1>
          <distortion_k2>0.00000001</distortion_k2>
          <distortion_k3>0.00000001</distortion_k3>
          <distortion_t1>0.00000001</distortion_t1>
          <distortion_t2>0.00000001</distortion_t2>
          <interface:camera name="narrow_stereo_gazebo_r_stereo_camera_iface"/>
        </controller:gazebo_ros_camera>
      </sensor:camera>
      <turnGravityOff>true</turnGravityOff>
      <material>PR2/Blue</material>
    </gazebo><gazebo reference="narrow_stereo_link">
      <material value="PR2/Blue"/>
      <turnGravityOff value="true"/>
    </gazebo><gazebo reference="narrow_stereo_optical_frame">
      <material value="PR2/Green"/>
      <turnGravityOff value="true"/>
    </gazebo><gazebo reference="double_stereo_double_stereo_link">
      <material value="PR2/Blue"/>
    </gazebo><gazebo reference="sensor_mount_sensor_link">
      <material value="PR2/Blue"/>
    </gazebo>

  <joint name="laser_tilt_mount_joint" type="revolute">
      <axis xyz="0 1 0"/>
      <limit effort="0.65" lower="-0.7854" upper="1.48353" velocity="10.0"/> <!-- alpha tested velocity and effort limits -->
      <safety_controller k_position="100" k_velocity="0.05" soft_lower_limit="-0.7354" soft_upper_limit="1.43353"/>
      <!-- hold both reference_position and upper/lower for tick-tock, remove reference_positiion after verifying upper/lower works with calibration controllers.  if search velocity in pr2_calibration_controllers.yaml is +, the reference_position is rising, if - then it is falling -->
      <calibration falling="0.0" reference_position="0.0"/>
      <dynamics damping="0.008"/>
      <origin rpy="0 0 0" xyz="0.1 0 0.235"/>
      <parent link="torso_lift_link"/>
      <child link="laser_tilt_mount_link"/>
    </joint><link name="laser_tilt_mount_link">

      <inertial>
        <mass value="0.05"/>
        <origin rpy="0 0 0" xyz="-0.03 0 -0.03"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.0001"/>
      </inertial>

      <visual name="laser_tilt_mount_visual">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry name="laser_tilt_mount_visual_geom">
          <mesh filename="package://pr2_description/meshes/tilting_laser_v0/hok_tilt.stl"/>
        </geometry>
        
        <material name="Red"/>
      </visual>

      <collision name="laser_tilt_mount_collision">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry name="laser_tilt_mount_collision_geom">
          <box size=".001 .001 .001"/>
        </geometry>
      </collision>
    </link><joint name="laser_tilt_joint" type="fixed">
      <axis xyz="0 1 0"/>
      <origin rpy="0 0 0" xyz="0 0 0.03"/>
      <parent link="laser_tilt_mount_link"/>
      <child link="laser_tilt_link"/>
    </joint><link name="laser_tilt_link" type="laser">
      <inertial>
        <mass value="0.001"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
      </inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.001 0.001 0.001"/>
        </geometry>
        <material name="Red"/>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size=".001 .001 .001"/>
        </geometry>
      </collision>
    </link><gazebo reference="laser_tilt_link">
      <sensor:ray name="laser_tilt">
        <rayCount>640</rayCount>
        <rangeCount>640</rangeCount>
        <laserCount>1</laserCount>

        <origin>0.0 0.0 0.0</origin>
        <displayRays>false</displayRays>

        <minAngle>-79.9999999086</minAngle>
        <maxAngle>79.9999999086</maxAngle>

        <minRange>0.05</minRange>
        <maxRange>10.0</maxRange>
        <resRange>0.01</resRange>
        <updateRate>20</updateRate>
        <controller:gazebo_ros_laser name="gazebo_ros_laser_tilt_controller" plugin="libgazebo_ros_laser.so">
          <gaussianNoise>0.005</gaussianNoise>
          <alwaysOn>true</alwaysOn>
          <updateRate>20</updateRate>
          <topicName>tilt_scan</topicName>
          <frameName>laser_tilt_link</frameName>
          <interface:laser name="gazebo_ros_laser_tilt_iface"/>
        </controller:gazebo_ros_laser>
      </sensor:ray>
    </gazebo><gazebo reference="laser_tilt_mount_link">
      <material value="PR2/Red"/>
    </gazebo><transmission name="laser_tilt_mount_trans" type="SimpleTransmission">
      <actuator name="laser_tilt_mount_motor"/>
      <joint name="laser_tilt_mount_joint"/>
      <mechanicalReduction>-6.05</mechanicalReduction>
    </transmission>

</robot>
